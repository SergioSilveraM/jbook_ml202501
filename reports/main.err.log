Traceback (most recent call last):
  File "/home/ssilvera/Escritorio/Proyectos/Modelo_pagos/.venv/lib/python3.12/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/home/ssilvera/Escritorio/Proyectos/Modelo_pagos/.venv/lib/python3.12/site-packages/nbclient/client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/ssilvera/Escritorio/Proyectos/Modelo_pagos/.venv/lib/python3.12/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/asyncio/base_events.py", line 687, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/home/ssilvera/Escritorio/Proyectos/Modelo_pagos/.venv/lib/python3.12/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/home/ssilvera/Escritorio/Proyectos/Modelo_pagos/.venv/lib/python3.12/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/home/ssilvera/Escritorio/Proyectos/Modelo_pagos/.venv/lib/python3.12/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import os
import joblib
import optuna
from lightgbm import LGBMClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, accuracy_score, confusion_matrix, ConfusionMatrixDisplay
import matplotlib.pyplot as plt
import pandas as pd

X.columns = X.columns.str.replace(r"[^\w\d_]", "_", regex=True)
# Dividir los datos en conjuntos de entrenamiento, validaci√≥n y prueba
X_train, X_temp, y_train, y_temp = train_test_split(X, y, test_size=0.3, random_state=42, stratify=y)
X_val, X_test, y_val, y_test = train_test_split(X_temp, y_temp, test_size=0.5, random_state=42, stratify=y_temp)

# Archivo para guardar/cargar el modelo
model_filename = "best_lgbm_model.pkl"

# Verificar si el modelo ya existe
if os.path.exists(model_filename):
    print(f"El modelo ya existe. Cargando desde {model_filename}...")
    best_lgbm = joblib.load(model_filename)
else:
    print("\nEl modelo no existe. Iniciando optimizaci√≥n con Optuna...")

    # Funci√≥n objetivo para Optuna
    def objective(trial):
        # Espacio de b√∫squeda de hiperpar√°metros
        param = {
            'num_leaves': trial.suggest_int('num_leaves', 20, 200),
            'max_depth': trial.suggest_int('max_depth', 3, 15),
            'learning_rate': trial.suggest_float('learning_rate', 0.001, 0.3, log=True),
            'n_estimators': trial.suggest_int('n_estimators', 100, 500),
            'min_child_samples': trial.suggest_int('min_child_samples', 10, 100),
            'subsample': trial.suggest_float('subsample', 0.6, 1.0),
            'colsample_bytree': trial.suggest_float('colsample_bytree', 0.6, 1.0),
            'device': 'gpu',  # Usar GPU
            'random_state': 42,
        }

        # Crear modelo
        lgbm = LGBMClassifier(**param)

        # Entrenar el modelo
        lgbm.fit(
            X_train, 
            y_train, 
            eval_set=[(X_val, y_val)], 
            #early_stopping_rounds=30
        )

        # Predecir en el conjunto de validaci√≥n
        y_val_pred = lgbm.predict(X_val)

        # Calcular precisi√≥n
        accuracy = accuracy_score(y_val, y_val_pred)
        return accuracy

    # Crear el estudio de Optuna
    study = optuna.create_study(direction="maximize")
    study.optimize(objective, n_trials=50)  # 50 iteraciones de optimizaci√≥n

    # Mostrar los mejores hiperpar√°metros
    print("\nMejores hiperpar√°metros:")
    print(study.best_params)

    # Crear el mejor modelo con los mejores par√°metros
    best_params = study.best_params
    best_lgbm = LGBMClassifier(**best_params, device='gpu', random_state=42)

    # Entrenar el mejor modelo con el conjunto de entrenamiento completo
    best_lgbm.fit(X_train, y_train)

    # Guardar el modelo
    joblib.dump(best_lgbm, model_filename)
    print(f"Modelo guardado como {model_filename}")

# Evaluar el modelo en el conjunto de validaci√≥n
y_val_pred = best_lgbm.predict(X_val)
val_accuracy = accuracy_score(y_val, y_val_pred)

print("\nPrecisi√≥n en el conjunto de validaci√≥n: {:.4f}".format(val_accuracy))
print(classification_report(y_val, y_val_pred))

# Mostrar la matriz de confusi√≥n para el conjunto de validaci√≥n
conf_matrix_val = confusion_matrix(y_val, y_val_pred)
disp_val = ConfusionMatrixDisplay(confusion_matrix=conf_matrix_val, display_labels=best_lgbm.classes_)
disp_val.plot(cmap='Blues', values_format='d')
plt.title("Matriz de Confusi√≥n - Conjunto de Validaci√≥n")
plt.show()

# Combinar conjuntos de entrenamiento y validaci√≥n para el modelo final
X_train_final = pd.concat([pd.DataFrame(X_train), pd.DataFrame(X_val)], axis=0)
y_train_final = pd.concat([pd.Series(y_train), pd.Series(y_val)], axis=0)

# Entrenar el modelo final con los datos combinados
best_lgbm.fit(X_train_final, y_train_final)

# Evaluar el modelo en el conjunto de prueba
y_test_pred = best_lgbm.predict(X_test)
test_accuracy = accuracy_score(y_test, y_test_pred)

print("\nPrecisi√≥n en el conjunto de prueba: {:.4f}".format(test_accuracy))
print(classification_report(y_test, y_test_pred))

# Mostrar la matriz de confusi√≥n para el conjunto de prueba
conf_matrix_test = confusion_matrix(y_test, y_test_pred)
disp_test = ConfusionMatrixDisplay(confusion_matrix=conf_matrix_test, display_labels=best_lgbm.classes_)
disp_test.plot(cmap='Blues', values_format='d')
plt.title("Matriz de Confusi√≥n - Conjunto de Prueba")
plt.show()

------------------

----- stderr -----
/home/ssilvera/Escritorio/Proyectos/Modelo_pagos/.venv/lib/python3.12/site-packages/tqdm/auto.py:21: TqdmWarning:

IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mNameError[0m                                 Traceback (most recent call last)
Cell [0;32mIn[23], line 10[0m
[1;32m      7[0m [38;5;28;01mimport[39;00m[38;5;250m [39m[38;5;21;01mmatplotlib[39;00m[38;5;21;01m.[39;00m[38;5;21;01mpyplot[39;00m[38;5;250m [39m[38;5;28;01mas[39;00m[38;5;250m [39m[38;5;21;01mplt[39;00m
[1;32m      8[0m [38;5;28;01mimport[39;00m[38;5;250m [39m[38;5;21;01mpandas[39;00m[38;5;250m [39m[38;5;28;01mas[39;00m[38;5;250m [39m[38;5;21;01mpd[39;00m
[0;32m---> 10[0m X[38;5;241m.[39mcolumns [38;5;241m=[39m [43mX[49m[38;5;241m.[39mcolumns[38;5;241m.[39mstr[38;5;241m.[39mreplace([38;5;124mr[39m[38;5;124m"[39m[38;5;124m[^[39m[38;5;124m\[39m[38;5;124mw[39m[38;5;124m\[39m[38;5;124md_][39m[38;5;124m"[39m, [38;5;124m"[39m[38;5;124m_[39m[38;5;124m"[39m, regex[38;5;241m=[39m[38;5;28;01mTrue[39;00m)
[1;32m     11[0m [38;5;66;03m# Dividir los datos en conjuntos de entrenamiento, validaci√≥n y prueba[39;00m
[1;32m     12[0m X_train, X_temp, y_train, y_temp [38;5;241m=[39m train_test_split(X, y, test_size[38;5;241m=[39m[38;5;241m0.3[39m, random_state[38;5;241m=[39m[38;5;241m42[39m, stratify[38;5;241m=[39my)

[0;31mNameError[0m: name 'X' is not defined

